class DisjointSet{
    
    public:
    vector<int> parent, size;
    DisjointSet(int n){
        parent.resize(n+1);
        for(int i=0;i<n+1;i++){
            parent[i]=i;
        }
        size.resize(n+1,1);
    }
    int findUltimateParent( int a){
        if(a==parent[a]){
            return a;
        }
        return parent[a]=  findUltimateParent( parent[a]);
        
    }
    
    void unionBySize(int a ,int b){
        int pu= findUltimateParent(a);
        int pv= findUltimateParent(b);
        if(pu==pv){
            return;
        }
        if(size[pu]>=size[pv]){
            parent[pv]=pu;
            size[pu]+=size[pv];
        }
        else{
            parent[pu]=pv;
            size[pv]+=size[pu];
        }
    }
};

class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n= grid.size();
        int s= n*n;
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};
        DisjointSet ds(s);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    for(int k=0;k<4;k++){
                        int nr= i+dr[k];
                        int nc= j+ dc[k];
                        if(nr>=0 && nr<n && nc>=0 && nc<n && grid[nr][nc]==1){
                            int node= i*n + j;
                            int adjnode= nr*n +nc;
                            if(ds.findUltimateParent(node) != ds.findUltimateParent(adjnode)){
                                ds.unionBySize(node,adjnode);
                            }
                        }
                    }
                }
            }
        }
        int islandsize=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                int island=1;
                set<int>components;
                if(grid[i][j]==0){
                    for(int k=0;k<4;k++){
                        int nr= i+dr[k];
                        int nc= j+ dc[k];
                        if(nr>=0 && nr<n && nc>=0 && nc<n && grid[nr][nc]==1){
                            int node= i*n + j;
                            int adjnode= nr*n + nc;
                            components.insert(ds.findUltimateParent(adjnode));
                        }
                    }
                    for(auto it:components){
                island+=ds.size[it];
                    }
                }
                islandsize= max(islandsize,island);
            }
        }
        for(int cell=0 ;cell<s;cell++){
            islandsize=max(islandsize, ds.size[ds.findUltimateParent(cell)]);
        }
        return islandsize;

    }
};
