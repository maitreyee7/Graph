class DisjointSet{
    
    public:
    vector<int> parent, size;
    DisjointSet(int n){
        parent.resize(n+1);
        for(int i=0;i<n+1;i++){
            parent[i]=i;
        }
        size.resize(n+1,1);
    }
    int findUltimateParent( int a){
        if(a==parent[a]){
            return a;
        }
        return parent[a]=  findUltimateParent( parent[a]);
        
    }
    
    void unionBySize(int a ,int b){
        int pu= findUltimateParent(a);
        int pv= findUltimateParent(b);
        if(pu==pv){
            return;
        }
        if(size[pu]>=size[pv]){
            parent[pv]=pu;
            size[pu]+=size[pv];
        }
        else{
            parent[pu]=pv;
            size[pv]+=size[pu];
        }
    }
};

class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n= stones.size();
        int maxRow=0;
        int maxCol= 0;
        for(auto it:stones){
            maxRow=max(maxRow,it[0]);
            maxCol=max(maxCol, it[1]);
        }

        DisjointSet ds(maxRow+maxCol+1);
        unordered_map<int,int> stoneNodes;
        int cnt=0;
        for(auto it:stones){
            int nodeRow= it[0];
            int nodeCol= it[1] + maxRow+ 1;
            ds.unionBySize(nodeRow,nodeCol);
            stoneNodes[nodeRow]=1;
            stoneNodes[nodeCol]=1;
        }

        for(auto it:stoneNodes){
            if(ds.findUltimateParent(it.first)==it.first){
                cnt++;
            }
        }
        return n-cnt;
    }
};
