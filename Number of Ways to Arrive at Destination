class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<long long> ways(n,0);
        ways[0]=1;
        vector<pair<int,int>> adj[n];
        for(int i=0;i<roads.size();i++){
            adj[roads[i][0]].push_back({roads[i][1],roads[i][2]});
            adj[roads[i][1]].push_back({roads[i][0],roads[i][2]});
        }
        priority_queue<pair<long long,long long> , vector<pair<long long,long long>>, greater<pair<long long,long long>>>q;
        q.push({0,0});
        vector<long long> dist(n, LLONG_MAX);
        dist[0]=0;
        const long long mod= 1e9 +7;
        while(!q.empty()){
            auto it= q.top();
            q.pop();
            long long dis=it.first;
            long long node= it.second;
            for(auto i: adj[node]){
                long long adjnode= i.first;
                long long w= i.second;
                if(dis + w <dist[adjnode]){
                    dist[adjnode]= dis + w ;
                    ways[adjnode]=ways[node];
                    q.push({dis + w, adjnode});
                }
                else if(dis + w ==dist[adjnode]){
                    ways[adjnode]=(ways[adjnode] + ways[node]) % mod;
                }
            }
        }
        return ways[n-1] % mod;

    }
};
