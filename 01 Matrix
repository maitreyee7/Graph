class Solution {
public:

    void bfs(vector<vector<int>>& mat, vector<vector<int>>& vis, vector<vector<int>>& dis,  queue<pair<pair<int,int>, int>> &q, int n, int m){
        int dr[]={-1,0,1,0};
        int dc[]= {0,1,0,-1};
        while(!q.empty()){
            auto it=q.front();
            int r=it.first.first;
            int c= it.first.second;
            int t= it.second;
            q.pop();
            dis[r][c]=t;
            for(int i=0;i<4;i++){
                int nr= r+dr[i], nc= c+dc[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m && mat[nr][nc]==1 && !vis[nr][nc]){
                    q.push({{nr,nc},t+1});
                    vis[nr][nc]=1;
                }
            }
        }

    }
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n= mat.size();
        int m=mat[0].size();
        queue<pair<pair<int,int>, int>> q;
        vector<vector<int>> vis(n,vector<int>(m,0));
         vector<vector<int>> dis(n,vector<int>(m,0));
         for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    q.push({{i,j},0});
                    vis[i][j]=1;
                }
            }
         }
         bfs(mat,vis,dis,q,n,m);
         return dis;
    }
};
