class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int> dis(N);
        queue<pair<int,int>>q;
        for(int i=0;i<N;i++){
            dis[i]=1e9;
        }
        dis[src]=0;
        q.push({src,0});
        vector<int> adj[N];
        for(int i=0;i<M;i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        while(!q.empty()){
            auto it=q.front();
            q.pop();
            int node= it.first;
            int w= it.second+1;
            for(auto i: adj[node]){
                if(dis[i]> w){
                    dis[i]=w;
                    q.push({i,w});
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dis[i]==1e9){
                dis[i]=-1;
            }
        }
        return dis;
    }
};
