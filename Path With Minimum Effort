class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n= heights.size(), m= heights[0].size();
        vector<vector<int>> dist(n,vector<int>(m,1e9));
        priority_queue<pair<int, pair<int,int>>, vector<pair<int, pair<int,int>>>, greater<pair<int, pair<int,int>>> >q;
        q.push({0,{0,0}});
        dist[0][0]=0;
        int maxi=0;
        int dr[]= {-1,0,1,0};
        int dc[]={0,1,0,-1};
        while(!q.empty()){
            auto it= q.top();
            int dis=it.first;
            int r= it.second.first;
            int c= it.second.second;
            if(r==n-1 && c==m-1){
                return dis;
            }
            q.pop();
            for(int i=0;i<4;i++){
                int nr= r+dr[i];
                int nc= c+dc[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m ){
                    int neweffort= max(dis, abs(heights[r][c]-heights[nr][nc]));
                    if(neweffort< dist[nr][nc]){
                    dist[nr][nc]=neweffort;
                    q.push({neweffort, {nr,nc}});
                    }
                }
            }
        }
        return dist[n-1][m-1];

    }
};
