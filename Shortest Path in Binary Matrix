class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        
        if(grid[0][0]==1){
            return -1;
        }
        int m= grid.size(), n= grid[0].size();
        if(m==1 && n==1 && grid[0][0]==0){
            return 1;
        }
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{0,0}});
        vector<vector<int>> dist(m,vector<int>(n,1e9));
        dist[0][0]=0;
        
        while(!q.empty()){
           auto it= q.front();
           int dis= it.first;
           int r= it.second.first;
           int c= it.second.second;
           q.pop();
           for(int i=-1;i<=1;i++){
            for(int j=-1;j<=1;j++){
                int nr= r+i;
                int nc= c+j;
                if(nr>=0 && nr<m && nc>=0 && nc<n && grid[nr][nc]==0 && (dis+1)<dist[nr][nc]){
                    dist[nr][nc]=dis+1;
                    if(nr==m-1 && nc== n-1){
                        return dis+1+1;
                    }
                    q.push({dis+1, {nr,nc}});
                }
            }
           }
        }
        if(dist[m-1][n-1]==1e9){
            return -1;
        }
       return 0;
    }
};
