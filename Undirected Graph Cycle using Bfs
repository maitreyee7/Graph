class Solution {
  public:
    
   
    bool detectBFS(int node, int V, vector<int> adj[],vector<int> &vis){
        queue<pair<int,int>>q; //node & parent 
        vis[node]=1;
        q.push({node,-1});
        while(!q.empty()){
            auto it= q.front();
            int n= it.first;
            int parent= it.second;
            q.pop();
            for(auto i:adj[n]){
                if(!vis[i]){
                    vis[i]=1;
                    q.push({i,n});
                }
                else {
                    if(parent!=i){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        
        for(int i=0;i<V;i++){
            if(!vis[i]){
           if(detectBFS(i,V,adj,vis)){
                return true;
            }
        }
        }
        return false;
    }
};
