class DisjointSet{
    vector<int> parent, size;
    public:
    DisjointSet(int n){
        parent.resize(n+1);
        for(int i=0;i<n+1;i++){
            parent[i]=i;
        }
        size.resize(n+1,1);
    }
    int findUltimateParent( int a){
        if(a==parent[a]){
            return a;
        }
        return parent[a]=  findUltimateParent( parent[a]);
        
    }
    
    void unionBySize(int a ,int b){
        int pu= findUltimateParent(a);
        int pv= findUltimateParent(b);
        if(pu==pv){
            return;
        }
        if(size[pu]>=size[pv]){
            parent[pv]=pu;
            size[pu]+=size[pv];
        }
        else{
            parent[pu]=pv;
            size[pv]+=size[pu];
        }
    }
};

class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& edge) {
         if(edge.size()<n-1){
           return -1;
       }
       DisjointSet ds(n);
       for(auto it:edge){
           int a= it[0];
           int b= it[1];
           ds.unionBySize(a,b);
       }
       int cnt=0;
       for(int i=0;i<n;i++){
           if(ds.findUltimateParent(i)==i){
               cnt++;
           }
       }
       return cnt-1;
       
    }
    
};
