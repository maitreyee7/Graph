void bfs(vector<vector<int>>& grid, vector<vector<int>>& vis, int n, int m, int & tt, queue<pair<pair<int,int>,int>> &q){
        int dr[]= {-1,0,1,0};
        int dc[]= {0,1,0,-1};
        while(!q.empty()){
            auto it= q.front();
            int x= it.first.first;
            int y= it.first.second;
            int t= it.second;
            tt= max(tt,t);
            q.pop();
            
                for(int i=0;i<4;i++){
                    int nr= x+dr[i];
                    int nc= y+dc[i];
                    if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]==1 && !vis[nr][nc]){
                        grid[nr][nc]=2;
                        q.push({{nr,nc},t+1});
                        vis[nr][nc]=1;
                    }
                }
            
            
        }
    }

    int orangesRotting(vector<vector<int>>& grid) {
        int n= grid.size();
        int m= grid[0].size();
        queue<pair<pair<int,int>, int>> q;
        vector<vector<int>> vis(n,vector<int>(m,0));
        int timetaken=0;
        int sr,sc;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                }
            }
        }
        bfs(grid,vis,n,m, timetaken, q);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }
        return timetaken;
    }
