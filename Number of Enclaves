class Solution {
public:

    void bfs(vector<vector<int>>& grid, vector<vector<int>>& vis,queue<pair<int,int>> &q, int n, int m){
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};
        while(!q.empty()){
            auto it= q.front();
            int x= it.first;
            int y= it.second;
       
            q.pop();
            for(int i=0;i<4;i++){
                int nr= x+dr[i];
                int nc= y+ dc[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]==1 && !vis[nr][nc]){
                    vis[nr][nc]=1;
                    q.push({nr,nc});
                }
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int n= grid.size();
        int m= grid[0].size();
        queue<pair<int,int>>q;
        vector<vector<int>> vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((i==0|| i== n-1 || j==0 || j==m-1) && grid[i][j]==1 && !vis[i][j]){
                    vis[i][j]=1;
                    q.push({i,j});
                }
            }
        } 
        
        int cnt=0;
        bfs(grid,vis,q,n,m);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]==1){
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
