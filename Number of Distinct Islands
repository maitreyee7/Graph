class Solution {
  public:
    void dfs(int i, int j,vector<vector<int>> & grid, vector<vector<int>> & vis, vector<pair<int,int>>&v, int ro, int co,int n,int m){
        vis[i][j]=1;
        v.push_back({i-ro,j-co});
        int dr[]= {-1,0,1,0};
        int dc[]={0,1,0,-1};
        for(int k=0;k<4;k++){
            int nr= i+dr[k];
            int nc= j+ dc[k];
            if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]==1 && !vis[nr][nc] ){
                dfs(nr,nc,grid,vis,v,ro,co,n,m);
            }
        }
    }
  
    int countDistinctIslands(vector<vector<int>>& grid) {
       int n= grid.size();
       int m= grid[0].size();
       vector<vector<int>> vis(n,vector<int>(m,0));
       set<vector<pair<int,int>>>s;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j]==1 && !vis[i][j]){
                vector<pair<int,int>>v;
                dfs(i,j,grid,vis,v,i,j,n,m);
                s.insert(v);
            }
        }
    }
    
    return s.size();
        
        
    }
};
