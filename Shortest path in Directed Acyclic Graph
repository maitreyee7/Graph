class Solution {
  public:
  void dfs( vector<pair<int,int>> adj[], stack<int> &s, int i,  vector<int>& vis){
      vis[i]=1;
      for(auto it: adj[i]){
          int a= it.first;
          if(!vis[a]){
              dfs(adj,s,a,vis);
          }
      }
      s.push(i);
  }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<int> dis(N);
        for(int i=0;i<N;i++){
            dis[i]=1e9;
        }
        vector<int> vis(N,0);
        vector<pair<int,int>> adj[N];
        for(int i=0;i<M;i++){
            adj[edges[i][0]].push_back({edges[i][1] , edges[i][2]});
        }
        stack<int> s;
        dis[0]=0;
    
        for(int i=0;i<N;i++){
            if(!vis[i]){
                dfs(adj,s,i,vis);
            }
        }
        while(!s.empty()){
            int a= s.top(); 
            s.pop();
           
            for(auto it: adj[a]){
                int v= it.first;
                int w= it.second;
               if( (dis[a] + w ) < dis[v]  ){
                     dis[v]= dis[a] + w;
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dis[i]==1e9){
                dis[i]=-1;
            }
        }
        return dis;
      
    }
};
